import React from 'react';
import { AlertCircle, CheckCircle, Clock, ArrowRight, Activity } from "lucide-react";

export const AnalysisResult = {
  possibleConditions: Array,
  recommendations: Array,
  urgency: String
}

const ResultsDisplay = ({ result }) => {
    
    let re =  result.result
    re = re.replace(/```json|```/g, '').trim();
    const data = JSON.parse(re);
    
    
    
  if (!data) return null;
  
  const getUrgencyDetails = () => {
    switch (data.urgency) {
      case "emergency":
        return {
          icon: <AlertCircle className="w-5 h-5 mr-2" />,
          color: "bg-red-50  text-red-700 ",
          text: "Seek immediate medical attention"
        };
      case "urgent":
        return {
          icon: <Clock className="w-5 h-5 mr-2" />,
          color: "bg-amber-50  text-amber-700 ",
          text: "Consult a doctor soon"
        };
      case "non-urgent":
        return {
          icon: <CheckCircle className="w-5 h-5 mr-2" />,
          color: "bg-green-50 text-green-700 ",
          text: "Monitor your symptoms"
        };
      default:
        return {
          icon: <Activity className="w-5 h-5 mr-2" />,
          color: "bg-blue-50 text-blue-700 ",
          text: "Review the analysis"
        };
    }
  };
  
  const urgency = getUrgencyDetails();
  
  return (
    <div className="w-full max-w-3xl mx-auto">
      {/* Urgency badge */}
      <div className={`flex items-center p-3 mb-4 rounded-lg ${urgency.color}`}>
        {urgency.icon}
        <span className="font-medium">{urgency.text}</span>
      </div>
      
      {/* Possible conditions */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-3">Possible Conditions</h2>
        <div className="space-y-4">
          {data.possibleConditions.map((condition, index) => (
            <div key={index} className="border rounded-lg overflow-hidden">
              <div className="flex items-center justify-between p-3 bg-gray-200">
                <h3 className="font-medium">
                  {condition.name}
                </h3>
                <ProbabilityBadge probability={condition.probability} />
              </div>
              <div className="p-3">
                {condition.description}
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {/* Recommendations */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-3">Recommendations</h2>
        <ul className="list-disc pl-5 space-y-2">
          {data.recommendations.map((recommendation, index) => (
            <li key={index} className="pl-1">
              {recommendation}
            </li>
          ))}
        </ul>
      </div>
      
      <div className="p-3 text-sm text-gray-500 bg-gray-50  rounded-lg">
        This analysis is generated by AI and is for informational purposes only.
        It is not a substitute for professional medical advice, diagnosis, or treatment.
      </div>
    </div>
  );
};

const ProbabilityBadge = ({ probability }) => {
  let bgColor, textColor;
  
  switch (probability) {
    case "high":
      bgColor = "bg-red-100 ";
      textColor = "text-red-700 ";
      break;
    case "medium":
      bgColor = "bg-amber-100 ";
      textColor = "text-amber-700 ";
      break;
    case "low":
      bgColor = "bg-green-100 ";
      textColor = "text-green-700 ";
      break;
    default:
      bgColor = "bg-gray-100 ";
      textColor = "text-gray-700 ";
  }
  
  return (
    <span className={`px-2 py-1 text-xs font-medium rounded-full ${bgColor} ${textColor}`}>
      {probability.charAt(0).toUpperCase() + probability.slice(1)} probability
    </span>
  );
};

export default ResultsDisplay;